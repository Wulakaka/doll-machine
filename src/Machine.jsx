import { useEffect, useMemo, useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import { Physics, RigidBody } from '@react-three/rapier'
import * as THREE from 'three'
import Dolls from './Dolls.jsx'
import Walls from './Walls.jsx'

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

export function Machine(props) {
  const { nodes, materials } = useGLTF('/model.glb')

  const clawA = useRef()
  const clawB = useRef()
  const clawC = useRef()

  useFrame((state) => {
    const time = state.clock.getElapsedTime()
    const rotationZ = time * 0.5
    const rotationA = new THREE.Quaternion()
    // [0, 0, -0.611]
    rotationA.setFromEuler(new THREE.Euler(0, 0, -0.611 + rotationZ))
    clawA.current.setNextKinematicRotation(rotationA)

    const rotationB = new THREE.Quaternion()
    // Math.PI, Math.PI / 3, 2.531
    rotationB.setFromEuler(
      new THREE.Euler(Math.PI, Math.PI / 3, 2.531 + rotationZ),
    )
    clawB.current.setNextKinematicRotation(rotationB)

    const rotationC = new THREE.Quaternion()
    // Math.PI, -Math.PI / 3, 2.531
    rotationC.setFromEuler(
      new THREE.Euler(Math.PI, -Math.PI / 3, 2.531 + rotationZ),
    )
    clawC.current.setNextKinematicRotation(rotationC)
  })

  return (
    <Physics debug={false} gravity={[0, -9.81, 0]}>
      <RigidBody>
        <mesh scale={[0.1, 0.1, 0.1]} position={[0, 2, 0]}>
          <boxGeometry />
          <meshBasicMaterial color="red" />
        </mesh>
      </RigidBody>
      <group {...props} dispose={null}>
        <RigidBody type={'fixed'} colliders={'trimesh'}>
          <mesh
            name="floor"
            castShadow
            receiveShadow
            geometry={nodes.floor.geometry}
            material={materials['Material.001']}
            position={[0, 0.843, 0]}
          />
          <mesh
            name="glassA"
            castShadow
            receiveShadow
            geometry={nodes.glassA.geometry}
            material={materials.glass}
            position={[-0.137, 0.967, 0.319]}
          />
          <mesh
            name="glassB"
            castShadow
            receiveShadow
            geometry={nodes.glassB.geometry}
            material={materials.glass}
            position={[-0.315, 0.967, 0.129]}
            rotation={[0, -1.571, 0]}
          />
        </RigidBody>
        <group position-y={-0.4}>
          <RigidBody
            type="kinematicPosition"
            ref={clawA}
            position={[0, 1.555, 0]}
          >
            <mesh
              name="clawA"
              castShadow
              receiveShadow
              geometry={nodes.clawA.geometry}
              material={materials.arm}
            />
          </RigidBody>
          <RigidBody
            type="kinematicPosition"
            ref={clawB}
            position={[0, 1.555, 0]}
          >
            <mesh
              name="clawB"
              castShadow
              receiveShadow
              geometry={nodes.clawB.geometry}
              material={materials.arm}
            />
          </RigidBody>
          <RigidBody
            type="kinematicPosition"
            ref={clawC}
            position={[0, 1.555, 0]}
          >
            <mesh
              name="clawC"
              castShadow
              receiveShadow
              geometry={nodes.clawC.geometry}
              material={materials.arm}
            />
          </RigidBody>
          <mesh
            name="Cube007"
            castShadow
            receiveShadow
            geometry={nodes.Cube007.geometry}
            material={materials.arm}
            position={[0, 1.73, 0]}
          />
        </group>
      </group>

      <Walls />
      <Dolls />
    </Physics>
  )
}

useGLTF.preload('/model.glb')
